#! /usr/bin/env python

import torch
from os import path
dir_script = path.dirname(path.realpath(__file__))
import sys
sys.path.append(dir_script+'/../')
import pydssp
import tqdm

C3_ALPHABET = ['-', 'H', 'E']

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
argparse = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
argparse.add_argument('pdbs', nargs='+', type=str, help='Input PDB file')
argparse.add_argument('--device', '-d', type=str, default=None, help='Device')
argparse.add_argument('--output-file', '-o', type=str, default=None, help='Output file')
args = argparse.parse_args()

if args.device == None:
    args.device = 'cuda' if torch.cuda.is_available() else 'cpu'

fh = open(args.output_file, 'w') if args.output_file is not None else sys.stdout

for pdb in tqdm.tqdm(args.pdbs):
    # read pdb file
    coord = torch.tensor(pydssp.read_pdbtext(open(pdb, 'r').read()))
    coord = coord.to(args.device)
    # main calculation
    dsspline = ''.join(pydssp.assign(coord))
    # write file or STDOUT
    fh.write(f"{dsspline} {pdb}\n")
